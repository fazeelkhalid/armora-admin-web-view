<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use DB;

use ScanReport;

class Vulnerability extends Model
{
    use HasFactory;
    
    protected $table = 'vulnerabilities';

    protected $primaryKey = 'code';
    public $incrementing = false;
    protected $fillable = [
        'code',
        'scan_report_id',
        'plugin_id',
        'cve',
        'cvss_risk_score',
        'risk',
        'host',
        'protocol',
        'port',
        'name',
        'synopsis',
        'description',
        'solution',
        'see_also',
        'plugin_output',
    ];

    public function ScanReport()
    {
        return $this->belongsTo(ScanReport::class, 'scan_report_id', 'code');
    }


    static function allDetails(){
        return DB::table('vulnerabilities')
        ->select(
            'devices.device_name',
            'vulnerabilities.code',
            'vulnerabilities.scan_report_id',
            'vulnerabilities.plugin_id',
            'vulnerabilities.cve',
            'vulnerabilities.cvss_risk_score',
            'vulnerabilities.risk',
            'vulnerabilities.host',
            'vulnerabilities.protocol',
            'vulnerabilities.port',
            'vulnerabilities.name',
            'vulnerabilities.synopsis',
            'vulnerabilities.description',
            'vulnerabilities.solution',
            'vulnerabilities.see_also',
            'vulnerabilities.plugin_output'
        )
        ->join('scan_reports', 'vulnerabilities.scan_report_id', '=', 'scan_reports.code')
        ->join('devices', 'scan_reports.device_id', '=', 'devices.code')
        ->where('devices.user_id', auth()->user()->id)
        ->get();
    }

    static function allVulnerability(){
        
        return DB::table('vulnerabilities')
        ->select(
            'devices.device_name',
            'vulnerabilities.code',
            'vulnerabilities.scan_report_id',
            'vulnerabilities.plugin_id',
            'vulnerabilities.cve',
            'vulnerabilities.cvss_risk_score',
            'vulnerabilities.risk',
            'vulnerabilities.host',
            'vulnerabilities.protocol',
            'vulnerabilities.port',
            'vulnerabilities.name',
            'vulnerabilities.synopsis',
            'vulnerabilities.description',
            'vulnerabilities.solution',
            'vulnerabilities.see_also',
            'vulnerabilities.plugin_output'
        )
        ->join('scan_reports', 'vulnerabilities.scan_report_id', '=', 'scan_reports.code')
        ->join('devices', 'scan_reports.device_id', '=', 'devices.code')
        ->where('devices.user_id', auth()->user()->id)
        ->get();
    }

    static function allDetailsBYReportID($id){
        
        return DB::table('vulnerabilities')
        ->select(
            'devices.device_name',
            'vulnerabilities.code',
            'vulnerabilities.scan_report_id',
            'vulnerabilities.plugin_id',
            'vulnerabilities.cve',
            'vulnerabilities.cvss_risk_score',
            'vulnerabilities.risk',
            'vulnerabilities.host',
            'vulnerabilities.protocol',
            'vulnerabilities.port',
            'vulnerabilities.name',
            'vulnerabilities.synopsis',
            'vulnerabilities.description',
            'vulnerabilities.solution',
            'vulnerabilities.see_also',
            'vulnerabilities.plugin_output'
        )
        ->join('scan_reports', 'vulnerabilities.scan_report_id', '=', 'scan_reports.code')
        ->join('devices', 'scan_reports.device_id', '=', 'devices.code')
        ->where('vulnerabilities.scan_report_id', '=', $id)
        ->where('devices.user_id', auth()->user()->id)
        ->get();
    }

    static function allDetailsvulnerabilityByID($id){
        
        $vulnerability = DB::table('vulnerabilities')
        ->select(
            'devices.device_name',
            'vulnerabilities.code',
            'vulnerabilities.scan_report_id',
            'vulnerabilities.plugin_id',
            'vulnerabilities.cve',
            'vulnerabilities.cvss_risk_score',
            'vulnerabilities.risk',
            'vulnerabilities.host',
            'vulnerabilities.protocol',
            'vulnerabilities.port',
            'vulnerabilities.name',
            'vulnerabilities.synopsis',
            'vulnerabilities.description',
            'vulnerabilities.solution',
            'vulnerabilities.see_also',
            'vulnerabilities.plugin_output'
        )
        ->join('scan_reports', 'vulnerabilities.scan_report_id', '=', 'scan_reports.code')
        ->join('devices', 'scan_reports.device_id', '=', 'devices.code')
        ->where('vulnerabilities.code', '=', $id)
        ->where('devices.user_id', auth()->user()->id)
        ->get();

        if ($vulnerability) {
            return response()->json(['vulnerability' => $vulnerability]);
        } 
        return response()->json(['message' => 'Invalid Vulnerability code', 404]);
    }

    public static function VulnerabilityCount(){
        return Vulnerability::whereHas('scanReport.device.user', function ($query) {
                $query->where('id', auth()->user()->id);
            })->count();
    }

    public static function VulnerabilityCountByToken($token){
        return Vulnerability::whereHas('scanReport.device', function ($query) use ($token) {
            $query->where('token', $token);
        })->count();
    }

    public static function deleteVulnerability($id){
        $vulnerability = Vulnerability::where('code', $id)
            ->whereHas('scanReport.device.user', function ($query) {
                $query->where('id', auth()->user()->id); 
            })
            ->first();
 
        if ($vulnerability) {
            $vulnerability->delete();
            return response()->json(['message' => 'Vulnerability deleted successfully']);
        } 
        return response()->json(['message' => 'Invalid Vulnerability code', 404]);
    }
}